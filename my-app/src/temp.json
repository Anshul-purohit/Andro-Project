[

        ["[Warning]", "Getting IMEI and Device ID:\r\n           This app has code getting the \"device id(IMEI)\" but there are problems with this \"TelephonyManager.getDeviceId()\" approach.\r\n               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique\r\n           identifier.\r\n               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all\r\n           if, in this situation, your app should regard this as the same device.\r\n               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.\r\n               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for\r\n           example zeros or asterisks.\r\n               If you want to get an unique id for the device, we suggest you use \"Installation\" framework in the following article.\r\n               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html\r\n\r\n               => Lde/ecspride/MainActivity;->aliasFlowTest()V (0x10) --->\r\n                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;\r\n\r\n" , "921" 
        
        ],
        ["[Warning]", "Codes for Sending SMS:\r\n           This app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage):\r\n               => Lde/ecspride/PrivateDateLeakage;->sendMessage(Landroid/view/View;)V (0x82) --->\r\n                    Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;\r\n                    Landroid/app/PendingIntent; Landroid/app/PendingIntent;)V"
        , "1046"
        ],
        ["[Warning]", "External Storage Accessing:            External storage access found (Remember DO NOT write important files to external storages):                => Lde/danoeh/antennapod/activity/DirectoryChooserActivity;->onCreate(Landroid/os/Bundle;)V (0x11c) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;"
        , "921"
        ],
        ["[Warning]", "AndroidManifest Exported Components Checking:            Found \"exported\" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).                These components can be initilized by other apps. You should add or modify the attribute to"
        , "926"
        ],
        ["[Warning]", "<WebView> WebView Local File Access Attacks Checking:            Found \"setAllowFileAccess(true)\" or not set(enabled by default) in WebView. The attackers could inject malicious script into            WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system            access. (It is enabled by default)                     Note that this enables or disables file system access only. Assets and resources are still accessible using            file:///android_asset and file:///android_res.                     The attackers can use \"mWebView.loadUrl(\"file:///data/data/"
        , "646"
        ],
        ["[Warning]", "External Storage Accessing:            External storage access found (Remember DO NOT write important files to external storages):                => Lorg/connectbot/PubkeyListActivity$3;->onMenuItemClick(Landroid/view/MenuItem;)Z (0x2) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Lorg/connectbot/PubkeyListActivity;->pickFileSimple()V (0x6) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;"
        , "921"
        ],
        ["[Warning]", "Dynamic Code Loading:            Dynamic code loading(DexClassLoader) found:                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0xa8) --->                     Ldalvik/system/DexClassLoader;-><init>(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;                     Ljava/lang/ClassLoader;)V                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0xd6) --->                     Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0x136) --->                     Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0x106) --->                     Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0xbe) --->                     Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0x11e) --->                     Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;                => Lcom/google/android/gms/internal/hy;->e(Landroid/content/Context;)V (0xee) --->                     Ldalvik/system/DexClassLoader;->loadClass(Ljava/lang/String;)Ljava/lang/Class;"
        , "1046"
        ],
        ["[Warning]", "External Storage Accessing:            External storage access found (Remember DO NOT write important files to external storages):                => Ldn/a;->b(Ljava/lang/String;)Ljava/lang/Boolean; (0x8) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->d(I)Ljava/lang/String; (0x4) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->a(I)Ljava/lang/String; (0x4) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->a(Ljava/lang/String;)Ljava/lang/String; (0x4) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->b(I)Ljava/lang/Boolean; (0x8) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->b()V (0x8) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->c(I)Ljava/lang/Boolean; (0x8) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Ldn/a;->c()V (0xe) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;"
        , "526"
        ],
        ["[Warning]", "<Sensitive_Information> Getting ANDROID_ID:            This app has code getting the 64-bit number \"Settings.Secure.ANDROID_ID\".                     ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on            releases of Android prior to 2.2 (Froyo).                     Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every            instance has the same ANDROID_ID.                     If you want to get an unique id for the device, we suggest you use \"Installation\" framework in the following article.                     Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html                 => Lcom/google/android/gms/internal/es;->a(Landroid/content/Context;)Ljava/lang/String; (0xc) --->                     Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;"
        , "694"
        ],
        ["[Warning]", "<WebView> WebView Potential XSS Attacks Checking:            Found \"setJavaScriptEnabled(true)\" in WebView, which could exposed to potential XSS attacks. Please check the web page code            carefully and sanitize the output:                => Lcom/google/android/gms/internal/ev;-><init>(Lcom/google/android/gms/internal/ew; Lcom/google/android/gms/internal/x; Z Z                     Lcom/google/android/gms/internal/is; Lcom/google/android/gms/internal/ct;)V (0x3e) --->                     Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V"
        , "926"
        ],
        ["[Warning]", "External Storage Accessing:            External storage access found (Remember DO NOT write important files to external storages):                => Lcom/mobeta/android/dslv/DragSortListView$DragSortTracker;-><init>(Lcom/mobeta/android/dslv/DragSortListView;)V (0x26)                     ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;"
        , "921"
        ],
        ["[Warning]", "<WebView> WebView Potential XSS Attacks Checking:            Found \"setJavaScriptEnabled(true)\" in WebView, which could exposed to potential XSS attacks. Please check the web page code            carefully and sanitize the output:                => Lcom/dozuki/ifixit/ui/WebViewFragment;->onCreateView(Landroid/view/LayoutInflater; Landroid/view/ViewGroup;                     Landroid/os/Bundle;)Landroid/view/View; (0xa4) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V                => Lcom/dozuki/ifixit/ui/guide/view/EmbedViewActivity;->onCreate(Landroid/os/Bundle;)V (0x78) --->                     Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V                => Lcom/dozuki/ifixit/ui/guide/StepEmbedFragment;->onCreateView(Landroid/view/LayoutInflater; Landroid/view/ViewGroup;                     Landroid/os/Bundle;)Landroid/view/View; (0x7c) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V                => Lcom/dozuki/ifixit/ui/auth/OpenIDActivity;->onCreate(Landroid/os/Bundle;)V (0xbc) --->                     Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V"
        , "448"
        ],
        ["[Warning]", "External Storage Accessing:            External storage access found (Remember DO NOT write important files to external storages):                => Lcom/ringdroid/RingdroidEditActivity;->makeRingtoneFilename(Ljava/lang/CharSequence; Ljava/lang/String;)Ljava/lang/String;                     (0x0) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Lcom/ringdroid/soundfile/SoundFile;->DumpSamples(Ljava/lang/String;)V (0x0) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;"
        , "1046"
        ],
        ["[Warning]", "Getting IMEI and Device ID:\r\n           This app has code getting the \"device id(IMEI)\" but there are problems with this \"TelephonyManager.getDeviceId()\" approach.\r\n               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique\r\n           identifier.\r\n               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all\r\n           if, in this situation, your app should regard this as the same device.\r\n               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.\r\n               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for\r\n           example zeros or asterisks.\r\n               If you want to get an unique id for the device, we suggest you use \"Installation\" framework in the following article.\r\n               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html\r\n\r\n               => Lde/ecspride/MainActivity;->onCreate(Landroid/os/Bundle;)V (0x22) --->\r\n                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;\r\n\r\n"
        , "1045"
        ],
        ["[Warning]","Getting IMEI and Device ID:\r\n           This app has code getting the \"device id(IMEI)\" but there are problems with this \"TelephonyManager.getDeviceId()\" approach.\r\n               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique\r\n           identifier.\r\n               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all\r\n           if, in this situation, your app should regard this as the same device.\r\n               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.\r\n               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for\r\n           example zeros or asterisks.\r\n               If you want to get an unique id for the device, we suggest you use \"Installation\" framework in the following article.\r\n               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html\r\n\r\n               => Lde/ecspride/InactiveActivity;->onCreate(Landroid/os/Bundle;)V (0x20) --->\r\n                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;"
        , "729"
        ],
        ["[Warning]","Getting IMEI and Device ID:\r\n           This app has code getting the \"device id(IMEI)\" but there are problems with this \"TelephonyManager.getDeviceId()\" approach.\r\n               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique\r\n           identifier.\r\n               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all\r\n           if, in this situation, your app should regard this as the same device.\r\n               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.\r\n               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for\r\n           example zeros or asterisks.\r\n               If you want to get an unique id for the device, we suggest you use \"Installation\" framework in the following article.\r\n               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html\r\n\r\n               => Lde/ecspride/MainActivity;->onCreate(Landroid/os/Bundle;)V (0x2e) --->\r\n                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;\r\n\r\n"
        , "640"
        ],
        ["[Warning]","Getting IMEI and Device ID:\r\n           This app has code getting the \"device id(IMEI)\" but there are problems with this \"TelephonyManager.getDeviceId()\" approach.\r\n               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique\r\n           identifier.\r\n               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all\r\n           if, in this situation, your app should regard this as the same device.\r\n               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.\r\n               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for\r\n           example zeros or asterisks.\r\n               If you want to get an unique id for the device, we suggest you use \"Installation\" framework in the following article.\r\n               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html\r\n\r\n               => Ledu/mit/public_api_field/MainActivity;->onCreate(Landroid/os/Bundle;)V (0x24) --->\r\n                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;"
        , "810"
        ],
        ["[Warning]",     "External Storage Accessing:            External storage access found (Remember DO NOT write important files to external storages):                => Lcom/google/zxing/client/android/encode/EncodeActivity;->share()V (0x40) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Lcom/google/zxing/client/android/history/HistoryManager;->saveHistory(Ljava/lang/String;)Landroid/net/Uri; (0x6) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;                => Lcom/google/zxing/client/android/encode/EncodeActivity;->onOptionsItemSelected(Landroid/view/MenuItem;)Z (0x62) --->                     Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;"
            , "921"
        ],
        ["[Critical]", "Android Debug Mode Checking:\r\n           DEBUG mode is ON(android:debuggable=\"true\") in AndroidManifest.xml. This is very dangerous. The attackers will be able to sniffer\r\n           the debug messages by Logcat. Please disable the DEBUG mode if it is a released application.\r\n",
        "1258"
    ],
    ["[Critical]", "Android Debug Certificate Checking:\r\n           App is signed with debug certificate, indicating that debug mode may be enabled. This could potentially be dangerous if used in\r\n           production environments.",
        "1291"
    ],
    ["[Critical]", "<#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:            'Fragment' or 'Fragment for ActionbarSherlock' has a severe vulnerability prior to Android 4.4 (API 19).                    Please check:                    (1)http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT                    (2)http://developer.android.com/reference/android/preference/PreferenceActivity.html#isValidFragment(java.lang.String)                    (3)http://stackoverflow.com/questions/19973034/isvalidfragment-android-api-19                    (4)http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection/                    (5)http://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf                    (6)https://cureblog.de/2013/11/cve-2013-6271-remove-device-locks-from-android-phone/                You MUST override 'isValidFragment' method in every \"PreferenceActivity\" class to avoid Exception throwing in Android 4.4:                    Lde/danoeh/antennapod/activity/PreferenceActivityGingerbread;                All of the potential vulnerable \"fragment\":                    Lcom/bumptech/glide/manager/RequestManagerFragment;                    Lcom/bumptech/glide/manager/SupportRequestManagerFragment;                    Lde/danoeh/antennapod/dialog/EpisodesApplyActionFragment;                    Lde/danoeh/antennapod/fragment/AddFeedFragment;                    Lde/danoeh/antennapod/fragment/AllEpisodesFragment;                    Lde/danoeh/antennapod/fragment/CoverFragment;                    Lde/danoeh/antennapod/fragment/DownloadsFragment;                    Lde/danoeh/antennapod/fragment/EpisodesFragment;                    Lde/danoeh/antennapod/fragment/ExternalPlayerFragment;                    Lde/danoeh/antennapod/fragment/ItemDescriptionFragment;                    Lde/danoeh/antennapod/fragment/ItemFragment;                    Lde/danoeh/antennapod/fragment/ItunesSearchFragment;                    Lde/danoeh/antennapod/fragment/QueueFragment;                    Lde/danoeh/antennapod/fragment/gpodnet/GpodnetMainFragment;                    Lde/danoeh/antennapod/fragment/gpodnet/PodcastListFragment;",
        "926"
    ],
    ["[Critical]", "<SSL_Security> SSL Connection Checking:            URLs that are NOT under SSL (Total: 4):                http://podlove.org/simple-chapters                    ->From class: Lde/danoeh/antennapod/core/syndication/handler/SyndHandler;->startPrefixMapping(Ljava/lang/String;                     Ljava/lang/String;)V                http://purl.org/dc/elements/1.1/                    ->From class: Lde/danoeh/antennapod/core/syndication/handler/SyndHandler;->startPrefixMapping(Ljava/lang/String;                     Ljava/lang/String;)V                http://purl.org/rss/1.0/modules/content/                    ->From class: Lde/danoeh/antennapod/core/syndication/handler/SyndHandler;->startPrefixMapping(Ljava/lang/String;                     Ljava/lang/String;)V                http://search.yahoo.com/mrss/                    ->From class: Lde/danoeh/antennapod/core/syndication/handler/SyndHandler;->startPrefixMapping(Ljava/lang/String;                     Ljava/lang/String;)V",
        "1046"
    ],
    ["[Critical]", "<Strandhogg> Standhogg 2.0:            This application is vulnerable to the Standhogg 2.0 vulnerability. Please set activity launchModes to 'singleTask' or            'singleInstance'. Please see https://promon.co/strandhogg-2-0/ for more details",
        "614"
    ],
    ["[Critical]", "<SSL_Security> SSL Connection Checking:            URLs that are NOT under SSL (Total: 6):                http://googleads.g.doubleclick.net                    ->From class: Lcom/google/android/gms/internal/dt;->run()V                http://media.admob.com/mraid/v1/mraid_app_banner.js                    ->From class: Lcom/google/android/gms/internal/fj;->shouldInterceptRequest(Landroid/webkit/WebView;                     Ljava/lang/String;)Landroid/webkit/WebResourceResponse;                http://media.admob.com/mraid/v1/mraid_app_expanded_banner.js                    ->From class: Lcom/google/android/gms/internal/fj;->shouldInterceptRequest(Landroid/webkit/WebView;                     Ljava/lang/String;)Landroid/webkit/WebResourceResponse;                http://media.admob.com/mraid/v1/mraid_app_interstitial.js                    ->From class: Lcom/google/android/gms/internal/fj;->shouldInterceptRequest(Landroid/webkit/WebView;                     Ljava/lang/String;)Landroid/webkit/WebResourceResponse;                http://plus.google.com/                    ->From class: Lcom/google/android/gms/internal/gn;-><clinit>()V                http://www.google.com                    ->From class: Lcom/google/android/gms/internal/ea;-><init>(Landroid/content/Context;)V",
        "647"
    ],
    ["[Critical]", "<Implicit_Intent> Implicit Service Checking:            To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your            services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will            respond to the intent, and the user cannot see which service starts.                Reference: http://developer.android.com/guide/components/intents-filters.html#Types                => com.dozuki.ifixit.model.auth.AuthenticatorService",
        "925"
    ],
    ["[Critical]", "AndroidManifest ContentProvider Exported Checking:            We strongly suggest you explicitly specify the \"exported\" attribute (AndroidManifest.xml).                For Android \"android:targetSdkVersion\" < 17, the exported value of ContentProvider is \"true\" by default.                For Android \"android:targetSdkVersion\" >= 17, the exported value of ContentProvider is \"false\" by default.                Which means if you do not explicitly set the \"android:exported\", you will expose your ContentProvider to Android < 4.2            devices.                Even if you set the provider the permission with",
        "926"
    ],
    ["[Critical]", "<SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):            This app allows Self-defined HOSTNAME VERIFIER to accept all Common Names(CN).                    This is [a critical] vulnerability and allows attackers to do MITM attacks with his valid certificate without your            knowledge.                    Case example:                    (1)http://osvdb.org/96411                    (2)http://www.wooyun.org/bugs/wooyun-2010-042710                    (3)http://www.wooyun.org/bugs/wooyun-2010-052339                    Also check Google doc: http://developer.android.com/training/articles/security-ssl.html (Caution: Replacing            HostnameVerifier can be very dangerous).                    OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3                    Check this book to see how to solve this issue: http://goo.gl/BFb65r                     To see what's the importance of Common Name(CN) verification.                    Use Google Chrome to navigate:                     - https://www.google.com   => SSL certificate is valid                     - https://60.199.175.158/  => This is the IP address of google.com, but the CN is not match, making the certificate            invalid. You still can go Google.com but now you cannot distinguish attackers from normal users                     Please check the code inside these methods:                Lcom/dozuki/ifixit/util/Utils$2;->verify(Ljava/lang/String; Ljavax/net/ssl/SSLSession;)Z",
        "647"
    ],
    ["[Critical]", "<SSL_Security> SSL Connection Checking:            URLs that are NOT under SSL (Total: 2):                http://plus.google.com/                    ->From class: Lcom/google/android/gms/common/internal/zzo;-><clinit>()V                http://www.ifixit.com/Store                    ->From class: Lcom/dozuki/ifixit/ui/BaseMenuDrawerActivity$NavigationItem;-><clinit>()V",
        "647"
    ],
    ["[Critical]", "<SSL_Security> SSL Certificate Verification Checking:            This app DOES NOT check the validation of SSL Certificate. It allows self-signed, expired or mismatch CN certificates for SSL            connection.                This is [a critical] vulnerability and allows attackers to do MITM attacks without your knowledge.                If you are transmitting users' username or password, these sensitive information may be leaking.                Reference:                (1)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3                (2)Android Security book: http://goo.gl/BFb65r                (3)https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=134807561                This vulnerability is much more severe than Apple's \"goto fail\" vulnerability: http://goo.gl/eFlovw                Please do not try to create a \"X509Certificate\" and override \"checkClientTrusted\", \"checkServerTrusted\", and            \"getAcceptedIssuers\" functions with blank implementation.                We strongly suggest you use the existing API instead of creating your own X509Certificate class.                Please modify or remove these vulnerable code:",
        "593"
    ],
    ["[Critical]", "<SSL_Security> SSL Connection Checking:            URLs that are NOT under SSL (Total: 8):                http://books.google.                    ->From class: Lcom/google/zxing/client/android/book/BrowseBookListener;->onItemClick(Landroid/widget/AdapterView;                     Landroid/view/View; I J)V                    ->From class: Lcom/google/zxing/client/android/LocaleManager;->isBookSearchUrl(Ljava/lang/String;)Z                    ->From class: Lcom/google/zxing/client/android/result/ResultHandler;->openBookSearch(Ljava/lang/String;)V                    ->From class: Lcom/google/zxing/client/android/result/ISBNResultHandler;->handleButtonPress(I)V                http://google.com/books                    ->From class: Lcom/google/zxing/client/android/LocaleManager;->isBookSearchUrl(Ljava/lang/String;)Z                http://maps.google.                    ->From class: Lcom/google/zxing/client/android/result/ResultHandler;->getDirections(D D)V                    ->From class: Lcom/google/zxing/client/android/result/GeoResultHandler;->handleButtonPress(I)V                http://www.google                    ->From class: Lcom/google/zxing/client/android/CaptureActivity;->onResume()V                http://www.google.                    ->From class: Lcom/google/zxing/client/android/result/ResultHandler;->openProductSearch(Ljava/lang/String;)V                    ->From class: Lcom/google/zxing/client/android/result/supplement/BookResultInfoRetriever;->retrieveSupplementalInfo()V                http://www.google.com/books?id=                    ->From class: Lcom/google/zxing/client/android/book/SearchBookContentsActivity$NetworkTask;-                     >doInBackground(",
        "499"
]
]