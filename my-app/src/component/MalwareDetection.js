import React, { useState } from "react";
import "./Malware.css";
import Instruction from "./Instruction";
import Reportsection from "./Reportsection";

const MalwareDetection = () => {
  const [selectedTool, setSelectedTool] = useState("");
  const [apkFile, setApkFile] = useState(null);
  const [reportPath, setReportPath] = useState("");
  const [result, setResult] = useState("");
  const [loading, setLoading] = useState(false);
  const [reportSections, setReportSections] = useState([]);
  const [expandedSections, setExpandedSections] = useState([true]);
  const [reportData, setReportData] = useState(null);
  const [showCriticals, setShowCriticals] = useState(false);
  const [showWarnings, setShowWarnings] = useState(false);
  const [showMediums, setShowMediums] = useState(false);
  const [showLows, setShowLows] = useState(false);

  const handleFileChange = (event) => {
    setApkFile(event.target.files[0]);
  };

  function generateSectionsForSuperAndroidAnalyzer(reportContent){
    console.log('from generateSections method->', reportContent)
    const sections = ["mediums", "criticals", "highs", "lows", "warnings"]
    let parsedSections = [];
    for(let i = 0; i<sections.length; i++){
      let sectionName = sections[i]
      if(reportContent[sectionName + "_len"] == 0) continue;
      let sectionContent = reportContent[sectionName]
      let sectionContentLen = sectionContent.length
      let subSections = []
      for(let j = 0; j<sectionContentLen; j++){
        const {name, description} = sectionContent[j]
        subSections.push({title : name, content : description})
      }
      parsedSections.push({title : sectionName, subSections})
    }
    return parsedSections;
  }

  function generateSections(data){
    let parsedSections = {};

    if(selectedTool == "SUPER Android Analyzer"){
      parsedSections = generateSectionsForSuperAndroidAnalyzer(data)
    }
    setReportSections(parsedSections);
    setExpandedSections(new Array(parsedSections.length).fill(false));
    return parsedSections;
  }

  const handleRun = () => {
    if (!selectedTool || !apkFile) return;
    setLoading(true);

    const formData = new FormData();
    formData.append("apkFile", apkFile);

    fetch(`http://localhost:4000/api/${selectedTool}/malware`, {
      method: "POST",
      body: formData,
      responseType: "json",
    })
      .then((res) => res.json())
      .then((data) => {
        setResult(data || "No result available");
        generateSections(data);
        // setReportData(data);
        // setReportPath(true);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error running tool:", error);
        setLoading(false);
      });
  };

  const handleToolChange = (event) => {
    setSelectedTool(event.target.value);
  };

  const handleDownload = () => {
    // console.log('from handledownload->', result)
    const jsonStr = JSON.stringify(result);
    // const blob = new Blob([result], { type: "text/plain" });

    // Create a temporary URL for the Blob
    // const blobUrl = URL.createObjectURL(blob);
    const blob = new Blob([jsonStr], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.style.display = "none";
    a.href = url;
    a.download = "result.json";
    document.body.appendChild(a);
    a.click();

    // Cleanup
    URL.revokeObjectURL(url);
    document.body.removeChild(a);

    // Create an anchor element
    // const link = document.createElement("a");
    // link.href = blobUrl;
    // link.download = "downloaded_file.txt"; // Specify the filename

    // // Programmatically click the link to start the download
    // link.click();

    // // Clean up the temporary URL and anchor element
    // URL.revokeObjectURL(blobUrl);
    // link.remove();
  };

  return (
    <div className="page-container">
      <Instruction />
      <div className="content">
        <div className="dropdown-container">
        <div >

        <div className="dropdown-and-toolinfo">
          <h3 style={{marginRight : '15px',marginLeft : '4px'}}>Select a malware Tool</h3>
          <select
            className="tool-select"
            value={selectedTool}
            onChange={handleToolChange}>
            <option value="">Select a tool</option>
            <option value="SUPER Android Analyzer">SUPER Android Analyzer</option>
            <option value="Virus">Virus Totals</option>
            <option value="Fortify">Fortify</option>
            <option value="Vezir">Vezir Project</option>
          </select>
        </div>
              </div>
        <div style={{display : 'flex', justifyContent : 'center'}}>
          <div>
            <h3 style={{marginTop : '15px'}}>Upload an APK File</h3>
            <input type="file" accept=".apk" onChange={handleFileChange} />
          </div>
        </div>
        {selectedTool && apkFile && (
          <div className="tool-infoo">
            <div style={{display : 'flex', justifyContent : 'center'}}>
              <div className="apk-info" style={{ background : '#fbfbfb', padding : '10px'}}>
                <h3>Selected Tool: {selectedTool}</h3>
                <p>Package Name: {apkFile.name}</p>
              </div>
            </div>
            {/* <h3>Selected Tool: {selectedTool}</h3>
            <h3>Uploaded APK File: {apkFile.name}</h3> */}
            <button style={{marginBottom : '20px', padding : '10px 30px 10px 30px'}} onClick={handleRun} disabled={loading}>
              {loading ? "Running..." : "Run"}
            </button>

            <Reportsection
              reportsections={reportSections}
              expandedSections={expandedSections}
              setExpandedSections={setExpandedSections}
              handleDownload={handleDownload}
            />
          </div>
        )}
          </div>
      </div>
    </div>
  );
};

export default MalwareDetection;
